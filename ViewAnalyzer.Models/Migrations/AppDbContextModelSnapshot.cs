// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ViewAnalyzer.Models;

namespace ViewAnalyzer.Models.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AnalyzerResultStudy", b =>
                {
                    b.Property<long>("AnalyzerResultsId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudiesId")
                        .HasColumnType("bigint");

                    b.HasKey("AnalyzerResultsId", "StudiesId");

                    b.HasIndex("StudiesId");

                    b.ToTable("AnalyzerResultStudy");
                });

            modelBuilder.Entity("AnalyzerStudy", b =>
                {
                    b.Property<long>("AnalyzersId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudiesId")
                        .HasColumnType("bigint");

                    b.HasKey("AnalyzersId", "StudiesId");

                    b.HasIndex("StudiesId");

                    b.ToTable("AnalyzerStudy");
                });

            modelBuilder.Entity("ViewAnalyzer.Models.Analyzer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Analyzers");
                });

            modelBuilder.Entity("ViewAnalyzer.Models.AnalyzerResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AnalyzerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<string>("Patient")
                        .HasColumnType("text");

                    b.Property<int>("Progress")
                        .HasColumnType("integer");

                    b.Property<List<StudyResult>>("Result")
                        .HasColumnType("jsonb");

                    b.Property<int>("ResultState")
                        .HasColumnType("integer");

                    b.Property<long>("StudyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AnalyzerId");

                    b.ToTable("AnalyzerResults");
                });

            modelBuilder.Entity("ViewAnalyzer.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ViewAnalyzer.Models.Study", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("ServiceCode")
                        .HasColumnType("integer");

                    b.Property<int>("TypeResult")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Studies");
                });

            modelBuilder.Entity("ViewAnalyzer.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AnalyzerResultStudy", b =>
                {
                    b.HasOne("ViewAnalyzer.Models.AnalyzerResult", null)
                        .WithMany()
                        .HasForeignKey("AnalyzerResultsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ViewAnalyzer.Models.Study", null)
                        .WithMany()
                        .HasForeignKey("StudiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnalyzerStudy", b =>
                {
                    b.HasOne("ViewAnalyzer.Models.Analyzer", null)
                        .WithMany()
                        .HasForeignKey("AnalyzersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ViewAnalyzer.Models.Study", null)
                        .WithMany()
                        .HasForeignKey("StudiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ViewAnalyzer.Models.AnalyzerResult", b =>
                {
                    b.HasOne("ViewAnalyzer.Models.Analyzer", "Analyzer")
                        .WithMany("AnalyzerResults")
                        .HasForeignKey("AnalyzerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analyzer");
                });

            modelBuilder.Entity("ViewAnalyzer.Models.User", b =>
                {
                    b.HasOne("ViewAnalyzer.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ViewAnalyzer.Models.Analyzer", b =>
                {
                    b.Navigation("AnalyzerResults");
                });

            modelBuilder.Entity("ViewAnalyzer.Models.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
